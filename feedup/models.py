from django.db import models
from django.utils import timezone
from django.contrib.postgres.fields import ArrayField   
from datetime import timedelta 
import secrets
import string
import os
from django.conf import settings

class FeedUpUser(models.Model):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=255, blank=True)
    password = models.CharField(max_length=128, null=True, blank=True) # For email/pass login
    google_id = models.CharField(max_length=128, unique=True, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
  

    # --- Add these properties to fix the AttributeError ---
    @property
    def is_authenticated(self):
        return True

    @property
    def is_anonymous(self):
        return False
    

    def __str__(self):
        return self.email
    
class ArticleStaging(models.Model):
    # ai_generated = models.BooleanField(default=False)  # True if generated by AI
    title = models.CharField(max_length=300)
    source_url = models.URLField(unique=True)
    source_name = models.CharField(max_length=50)
    raw_content = models.TextField()
    tag_suggestions = models.JSONField(default=list)
    published_at = models.DateTimeField()
    processed = models.BooleanField(default=False)
    approved = models.BooleanField(default=False)
    summary = models.TextField(blank=True, null=True)  # for TL;DR
    prompts = models.JSONField(default=list, blank=True)  # e.g. ["Explain X", "Try coding Y"]

    class Meta:
        ordering = ['-published_at']

    def __str__(self):
        return f"{self.title} ({self.source_name})"
    
class Article(models.Model):
    """
    Represents a processed, approved, and user-facing article.
    This is the "production" table.
    """
    title = models.CharField(max_length=300)
    source_url = models.URLField(unique=True)
    source_name = models.CharField(max_length=50)
    summary = models.TextField()
    prompts = models.JSONField(default=list, blank=True)
    published_at = models.DateTimeField()
    
    # Link back to the original staging article for reference
    staging_article = models.OneToOneField(
        'ArticleStaging', 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True
    )

    class Meta:
        ordering = ['-published_at']

    def __str__(self):
        return self.title    

class Bookmark(models.Model):
    """
    Represents a user's bookmark of an article.
    """
    user = models.ForeignKey(FeedUpUser, on_delete=models.CASCADE, related_name='bookmarks')
    # âœ… Point the bookmark back to the Articlemodel.
    article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='bookmarks')
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        # Ensures a user can only bookmark an article once.
        unique_together = ('user', 'article')
        ordering = ['-created_at']

    def __str__(self):
        return f"'{self.article.title}' bookmarked by {self.user.email}"
    
class OTPVerification(models.Model):
    """
    Stores OTPs for email verification.
    """
    email = models.EmailField()
    otp = models.CharField(max_length=6)
    created_at = models.DateTimeField(auto_now_add=True)
    expires_at = models.DateTimeField()

    def save(self, *args, **kwargs):
        # Set an expiration time of 10 minutes upon creation
        if not self.pk:
            self.expires_at = timezone.now() + timedelta(minutes=10)
        super().save(*args, **kwargs)

    @staticmethod
    def generate_otp():
        """Generates a random 6-digit OTP."""
        return ''.join(secrets.choice(string.digits) for _ in range(6))

    def __str__(self):
        return f"OTP for {self.email}"

class AiResponseBookmark(models.Model):
    """
    Represents a bookmarked AI question and answer pair related to an article.
    """
    user = models.ForeignKey(FeedUpUser, on_delete=models.CASCADE, related_name='ai_bookmarks')
    original_article = models.ForeignKey(Article, on_delete=models.CASCADE, related_name='ai_bookmarks')
    question = models.TextField()
    answer = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']
        # Ensures a user cannot bookmark the same question for the same article more than once.
        constraints = [
            models.UniqueConstraint(fields=['user', 'original_article', 'question'], name='unique_ai_bookmark_per_user')
        ]

    def __str__(self):
        return f"Bookmark by {self.user.email} on article '{self.original_article.title}'"

