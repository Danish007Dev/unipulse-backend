"""
Django settings for uniBackend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-c(cjm(%^_=pof-zrftr33x5#8o=7a&xs#k%-u$f8ufc79e3)%z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.159.34','192.168.201.34','localhost','127.0.0.1','10.0.2.2']


# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'uniapp',
    'rest_framework',
    'rest_framework.authtoken',
    'django_extensions',
    'rest_framework_simplejwt',
    'nested_admin',
]

REST_FRAMEWORK = {
   "DEFAULT_AUTHENTICATION_CLASSES": (
        "uniapp.authentication.CustomJWTAuthentication",  # <-- your custom one
        #"rest_framework_simplejwt.authentication.JWTAuthentication",  # Enables JWT
        
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        #"rest_framework.permissions.AllowAny", # AllowAny globally,ensuring unauthenticated access for general endpoints like request-otp, verify-otp
        "rest_framework.permissions.IsAuthenticated",  # Default: Auth required for all endpoints
    ),
    
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}
from datetime import timedelta
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),  # Short lifespan for security then deleted from database
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),     # Long lifespan for convenience
    "ROTATE_REFRESH_TOKENS": True,                   # Issue new refresh token with each access token refresh
    "BLACKLIST_AFTER_ROTATION": True,                # Old refresh tokens are invalidated
    "ALGORITHM": "HS256",                            #better is RS256,install cryptograhpy package 
    "SIGNING_KEY": SECRET_KEY,                       # Use Django's secret key for signing
    "AUTH_HEADER_TYPES": ("Bearer",),                # Token type in Authorization header
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOWED_ORIGINS = [
    #"http://127.0.0.1:8000",
    "http://localhost:8000",  # If running Flutter web on local
    "http://10.0.2.2:8000",   # If using Android Emulator
    "http://192.168.159.34:8000",
    "http://192.168.201.34:8000",  # If using a real mobile device (Replace with your actual IP)
]

CORS_ALLOW_ALL_ORIGINS = True


# Allow all headers and methods
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'content-type',
    'authorization',
]
CORS_ALLOW_METHODS = [
    'GET',
    'POST',
    'PUT',
    'PATCH',
    'DELETE',
    'OPTIONS',
]


ROOT_URLCONF = 'uniBackend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'uniBackend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'unipulseDB',
        'USER': 'danishdev',
        'PASSWORD': 'hesoyam18',
        'HOST': 'localhost',  # or wherever your database is hosted
        'PORT': '5432',  # default port for PostgreSQL
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Email Backend
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

import environ

env = environ.Env()
environ.Env.read_env()

# SMTP Configuration (Using Gmail)
EMAIL_HOST = 'smtp.gmail.com'        # SMTP server
EMAIL_PORT = 587                      # Port number (TLS)
EMAIL_USE_TLS = True                  # Use TLS encryption

EMAIL_HOST_USER = env("EMAIL_HOST_USER")  # Retrieves email from .env
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")  # Retrieves password from .env



# Define Frontend URL (Where users will click login link) # Change this when deploying
FRONTEND_URL = 'http://localhost:8000' #,'http://10.0.2.2:8000'  #If running locally and hosted or support both


SESSION_ENGINE = "django.contrib.sessions.backends.db"  # Store session data in the database
SESSION_COOKIE_AGE = 86400  # Session expires in 24 hours
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Keep session active until it expires
SESSION_SAVE_EVERY_REQUEST = True  # Refresh session expiration on each request




import os   
# If you ever deploy to production, you must configure your web server (like Nginx or Apache) 
# to serve files from MEDIA_ROOT. Django wonâ€™t serve them in production.

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



ALLOWED_HOSTS = ['*']  # or specifically: ['127.0.0.1', '10.0.2.2', 'localhost']
